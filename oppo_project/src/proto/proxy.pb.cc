// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy.proto

#include "proxy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proxy_proto {
PROTOBUF_CONSTEXPR CheckaliveCMD::CheckaliveCMD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckaliveCMDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckaliveCMDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckaliveCMDDefaultTypeInternal() {}
  union {
    CheckaliveCMD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckaliveCMDDefaultTypeInternal _CheckaliveCMD_default_instance_;
PROTOBUF_CONSTEXPR RequestResult::RequestResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestResultDefaultTypeInternal() {}
  union {
    RequestResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestResultDefaultTypeInternal _RequestResult_default_instance_;
PROTOBUF_CONSTEXPR ObjectAndPlacement::ObjectAndPlacement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shardid_)*/{}
  , /*decltype(_impl_._shardid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.datanodeip_)*/{}
  , /*decltype(_impl_.datanodeport_)*/{}
  , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bigobject_)*/false
  , /*decltype(_impl_.valuesizebyte_)*/0
  , /*decltype(_impl_.k_)*/0
  , /*decltype(_impl_.m_)*/0
  , /*decltype(_impl_.blocksizebyte_)*/0
  , /*decltype(_impl_.clientport_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectAndPlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectAndPlacementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectAndPlacementDefaultTypeInternal() {}
  union {
    ObjectAndPlacement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectAndPlacementDefaultTypeInternal _ObjectAndPlacement_default_instance_;
PROTOBUF_CONSTEXPR SetReply::SetReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ifcommit_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetReplyDefaultTypeInternal() {}
  union {
    SetReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetReplyDefaultTypeInternal _SetReply_default_instance_;
PROTOBUF_CONSTEXPR GetReply::GetReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.getsuccess_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetReplyDefaultTypeInternal() {}
  union {
    GetReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetReplyDefaultTypeInternal _GetReply_default_instance_;
}  // namespace proxy_proto
static ::_pb::Metadata file_level_metadata_proxy_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proxy_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proxy_2eproto = nullptr;

const uint32_t TableStruct_proxy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::CheckaliveCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::CheckaliveCMD, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RequestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RequestResult, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.bigobject_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.valuesizebyte_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.m_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.shardid_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.datanodeip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.datanodeport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.blocksizebyte_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.clientip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.clientport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::SetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::SetReply, _impl_.ifcommit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::GetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::GetReply, _impl_.getsuccess_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proxy_proto::CheckaliveCMD)},
  { 7, -1, -1, sizeof(::proxy_proto::RequestResult)},
  { 14, -1, -1, sizeof(::proxy_proto::ObjectAndPlacement)},
  { 31, -1, -1, sizeof(::proxy_proto::SetReply)},
  { 38, -1, -1, sizeof(::proxy_proto::GetReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proxy_proto::_CheckaliveCMD_default_instance_._instance,
  &::proxy_proto::_RequestResult_default_instance_._instance,
  &::proxy_proto::_ObjectAndPlacement_default_instance_._instance,
  &::proxy_proto::_SetReply_default_instance_._instance,
  &::proxy_proto::_GetReply_default_instance_._instance,
};

const char descriptor_table_protodef_proxy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013proxy.proto\022\013proxy_proto\"\035\n\rCheckalive"
  "CMD\022\014\n\004name\030\001 \001(\t\" \n\rRequestResult\022\017\n\007me"
  "ssage\030\001 \001(\010\"\331\001\n\022ObjectAndPlacement\022\021\n\tbi"
  "gobject\030\001 \001(\010\022\013\n\003key\030\002 \001(\t\022\025\n\rvaluesizeb"
  "yte\030\003 \001(\005\022\t\n\001k\030\004 \001(\005\022\t\n\001m\030\005 \001(\005\022\017\n\007shard"
  "id\030\006 \003(\003\022\022\n\ndatanodeip\030\007 \003(\t\022\024\n\014datanode"
  "port\030\010 \003(\005\022\025\n\rblocksizebyte\030\t \001(\005\022\020\n\010cli"
  "entip\030\n \001(\t\022\022\n\nclientport\030\013 \001(\005\"\034\n\010SetRe"
  "ply\022\020\n\010ifcommit\030\001 \001(\010\"\036\n\010GetReply\022\022\n\nget"
  "success\030\001 \001(\0102\360\001\n\014proxyService\022D\n\nchecka"
  "live\022\032.proxy_proto.CheckaliveCMD\032\032.proxy"
  "_proto.RequestResult\022L\n\022EncodeAndSetObje"
  "ct\022\037.proxy_proto.ObjectAndPlacement\032\025.pr"
  "oxy_proto.SetReply\022L\n\022decodeAndGetObject"
  "\022\037.proxy_proto.ObjectAndPlacement\032\025.prox"
  "y_proto.GetReplyb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_proxy_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proxy_2eproto = {
    false, false, 624, descriptor_table_protodef_proxy_2eproto,
    "proxy.proto",
    &descriptor_table_proxy_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_proxy_2eproto::offsets,
    file_level_metadata_proxy_2eproto, file_level_enum_descriptors_proxy_2eproto,
    file_level_service_descriptors_proxy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proxy_2eproto_getter() {
  return &descriptor_table_proxy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proxy_2eproto(&descriptor_table_proxy_2eproto);
namespace proxy_proto {

// ===================================================================

class CheckaliveCMD::_Internal {
 public:
};

CheckaliveCMD::CheckaliveCMD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.CheckaliveCMD)
}
CheckaliveCMD::CheckaliveCMD(const CheckaliveCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckaliveCMD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proxy_proto.CheckaliveCMD)
}

inline void CheckaliveCMD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CheckaliveCMD::~CheckaliveCMD() {
  // @@protoc_insertion_point(destructor:proxy_proto.CheckaliveCMD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckaliveCMD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CheckaliveCMD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckaliveCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.CheckaliveCMD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckaliveCMD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.CheckaliveCMD.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckaliveCMD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.CheckaliveCMD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.CheckaliveCMD.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.CheckaliveCMD)
  return target;
}

size_t CheckaliveCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.CheckaliveCMD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckaliveCMD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckaliveCMD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckaliveCMD::GetClassData() const { return &_class_data_; }


void CheckaliveCMD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckaliveCMD*>(&to_msg);
  auto& from = static_cast<const CheckaliveCMD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.CheckaliveCMD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckaliveCMD::CopyFrom(const CheckaliveCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.CheckaliveCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckaliveCMD::IsInitialized() const {
  return true;
}

void CheckaliveCMD::InternalSwap(CheckaliveCMD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckaliveCMD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[0]);
}

// ===================================================================

class RequestResult::_Internal {
 public:
};

RequestResult::RequestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.RequestResult)
}
RequestResult::RequestResult(const RequestResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.message_ = from._impl_.message_;
  // @@protoc_insertion_point(copy_constructor:proxy_proto.RequestResult)
}

inline void RequestResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestResult::~RequestResult() {
  // @@protoc_insertion_point(destructor:proxy_proto.RequestResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.RequestResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.RequestResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool message = 1;
  if (this->_internal_message() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.RequestResult)
  return target;
}

size_t RequestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.RequestResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool message = 1;
  if (this->_internal_message() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestResult::GetClassData() const { return &_class_data_; }


void RequestResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestResult*>(&to_msg);
  auto& from = static_cast<const RequestResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.RequestResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_message() != 0) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestResult::CopyFrom(const RequestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.RequestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResult::IsInitialized() const {
  return true;
}

void RequestResult::InternalSwap(RequestResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[1]);
}

// ===================================================================

class ObjectAndPlacement::_Internal {
 public:
};

ObjectAndPlacement::ObjectAndPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.ObjectAndPlacement)
}
ObjectAndPlacement::ObjectAndPlacement(const ObjectAndPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectAndPlacement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shardid_){from._impl_.shardid_}
    , /*decltype(_impl_._shardid_cached_byte_size_)*/{0}
    , decltype(_impl_.datanodeip_){from._impl_.datanodeip_}
    , decltype(_impl_.datanodeport_){from._impl_.datanodeport_}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.key_){}
    , decltype(_impl_.clientip_){}
    , decltype(_impl_.bigobject_){}
    , decltype(_impl_.valuesizebyte_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.m_){}
    , decltype(_impl_.blocksizebyte_){}
    , decltype(_impl_.clientport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientip().empty()) {
    _this->_impl_.clientip_.Set(from._internal_clientip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bigobject_, &from._impl_.bigobject_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clientport_) -
    reinterpret_cast<char*>(&_impl_.bigobject_)) + sizeof(_impl_.clientport_));
  // @@protoc_insertion_point(copy_constructor:proxy_proto.ObjectAndPlacement)
}

inline void ObjectAndPlacement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shardid_){arena}
    , /*decltype(_impl_._shardid_cached_byte_size_)*/{0}
    , decltype(_impl_.datanodeip_){arena}
    , decltype(_impl_.datanodeport_){arena}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.key_){}
    , decltype(_impl_.clientip_){}
    , decltype(_impl_.bigobject_){false}
    , decltype(_impl_.valuesizebyte_){0}
    , decltype(_impl_.k_){0}
    , decltype(_impl_.m_){0}
    , decltype(_impl_.blocksizebyte_){0}
    , decltype(_impl_.clientport_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectAndPlacement::~ObjectAndPlacement() {
  // @@protoc_insertion_point(destructor:proxy_proto.ObjectAndPlacement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectAndPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shardid_.~RepeatedField();
  _impl_.datanodeip_.~RepeatedPtrField();
  _impl_.datanodeport_.~RepeatedField();
  _impl_.key_.Destroy();
  _impl_.clientip_.Destroy();
}

void ObjectAndPlacement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectAndPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.ObjectAndPlacement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shardid_.Clear();
  _impl_.datanodeip_.Clear();
  _impl_.datanodeport_.Clear();
  _impl_.key_.ClearToEmpty();
  _impl_.clientip_.ClearToEmpty();
  ::memset(&_impl_.bigobject_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clientport_) -
      reinterpret_cast<char*>(&_impl_.bigobject_)) + sizeof(_impl_.clientport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectAndPlacement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bigobject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bigobject_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.ObjectAndPlacement.key"));
        } else
          goto handle_unusual;
        continue;
      // int32 valuesizebyte = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.valuesizebyte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 k = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 m = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 shardid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_shardid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_shardid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string datanodeip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_datanodeip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.ObjectAndPlacement.datanodeip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 datanodeport = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_datanodeport(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_datanodeport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 blocksizebyte = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.blocksizebyte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_clientip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.ObjectAndPlacement.clientip"));
        } else
          goto handle_unusual;
        continue;
      // int32 clientport = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.clientport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectAndPlacement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.ObjectAndPlacement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bigobject = 1;
  if (this->_internal_bigobject() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bigobject(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.ObjectAndPlacement.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // int32 valuesizebyte = 3;
  if (this->_internal_valuesizebyte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_valuesizebyte(), target);
  }

  // int32 k = 4;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_k(), target);
  }

  // int32 m = 5;
  if (this->_internal_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_m(), target);
  }

  // repeated int64 shardid = 6;
  {
    int byte_size = _impl_._shardid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_shardid(), byte_size, target);
    }
  }

  // repeated string datanodeip = 7;
  for (int i = 0, n = this->_internal_datanodeip_size(); i < n; i++) {
    const auto& s = this->_internal_datanodeip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.ObjectAndPlacement.datanodeip");
    target = stream->WriteString(7, s, target);
  }

  // repeated int32 datanodeport = 8;
  {
    int byte_size = _impl_._datanodeport_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_datanodeport(), byte_size, target);
    }
  }

  // int32 blocksizebyte = 9;
  if (this->_internal_blocksizebyte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_blocksizebyte(), target);
  }

  // string clientip = 10;
  if (!this->_internal_clientip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientip().data(), static_cast<int>(this->_internal_clientip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.ObjectAndPlacement.clientip");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_clientip(), target);
  }

  // int32 clientport = 11;
  if (this->_internal_clientport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_clientport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.ObjectAndPlacement)
  return target;
}

size_t ObjectAndPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.ObjectAndPlacement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shardid = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.shardid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shardid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string datanodeip = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.datanodeip_.size());
  for (int i = 0, n = _impl_.datanodeip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.datanodeip_.Get(i));
  }

  // repeated int32 datanodeport = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.datanodeport_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._datanodeport_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string clientip = 10;
  if (!this->_internal_clientip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientip());
  }

  // bool bigobject = 1;
  if (this->_internal_bigobject() != 0) {
    total_size += 1 + 1;
  }

  // int32 valuesizebyte = 3;
  if (this->_internal_valuesizebyte() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_valuesizebyte());
  }

  // int32 k = 4;
  if (this->_internal_k() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_k());
  }

  // int32 m = 5;
  if (this->_internal_m() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m());
  }

  // int32 blocksizebyte = 9;
  if (this->_internal_blocksizebyte() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_blocksizebyte());
  }

  // int32 clientport = 11;
  if (this->_internal_clientport() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectAndPlacement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectAndPlacement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectAndPlacement::GetClassData() const { return &_class_data_; }


void ObjectAndPlacement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectAndPlacement*>(&to_msg);
  auto& from = static_cast<const ObjectAndPlacement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.ObjectAndPlacement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shardid_.MergeFrom(from._impl_.shardid_);
  _this->_impl_.datanodeip_.MergeFrom(from._impl_.datanodeip_);
  _this->_impl_.datanodeport_.MergeFrom(from._impl_.datanodeport_);
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_clientip().empty()) {
    _this->_internal_set_clientip(from._internal_clientip());
  }
  if (from._internal_bigobject() != 0) {
    _this->_internal_set_bigobject(from._internal_bigobject());
  }
  if (from._internal_valuesizebyte() != 0) {
    _this->_internal_set_valuesizebyte(from._internal_valuesizebyte());
  }
  if (from._internal_k() != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  if (from._internal_m() != 0) {
    _this->_internal_set_m(from._internal_m());
  }
  if (from._internal_blocksizebyte() != 0) {
    _this->_internal_set_blocksizebyte(from._internal_blocksizebyte());
  }
  if (from._internal_clientport() != 0) {
    _this->_internal_set_clientport(from._internal_clientport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectAndPlacement::CopyFrom(const ObjectAndPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.ObjectAndPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAndPlacement::IsInitialized() const {
  return true;
}

void ObjectAndPlacement::InternalSwap(ObjectAndPlacement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shardid_.InternalSwap(&other->_impl_.shardid_);
  _impl_.datanodeip_.InternalSwap(&other->_impl_.datanodeip_);
  _impl_.datanodeport_.InternalSwap(&other->_impl_.datanodeport_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientip_, lhs_arena,
      &other->_impl_.clientip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectAndPlacement, _impl_.clientport_)
      + sizeof(ObjectAndPlacement::_impl_.clientport_)
      - PROTOBUF_FIELD_OFFSET(ObjectAndPlacement, _impl_.bigobject_)>(
          reinterpret_cast<char*>(&_impl_.bigobject_),
          reinterpret_cast<char*>(&other->_impl_.bigobject_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectAndPlacement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[2]);
}

// ===================================================================

class SetReply::_Internal {
 public:
};

SetReply::SetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.SetReply)
}
SetReply::SetReply(const SetReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ifcommit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ifcommit_ = from._impl_.ifcommit_;
  // @@protoc_insertion_point(copy_constructor:proxy_proto.SetReply)
}

inline void SetReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ifcommit_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetReply::~SetReply() {
  // @@protoc_insertion_point(destructor:proxy_proto.SetReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.SetReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ifcommit_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ifcommit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ifcommit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.SetReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ifcommit = 1;
  if (this->_internal_ifcommit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ifcommit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.SetReply)
  return target;
}

size_t SetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.SetReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ifcommit = 1;
  if (this->_internal_ifcommit() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetReply::GetClassData() const { return &_class_data_; }


void SetReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetReply*>(&to_msg);
  auto& from = static_cast<const SetReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.SetReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ifcommit() != 0) {
    _this->_internal_set_ifcommit(from._internal_ifcommit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetReply::CopyFrom(const SetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.SetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetReply::IsInitialized() const {
  return true;
}

void SetReply::InternalSwap(SetReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ifcommit_, other->_impl_.ifcommit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[3]);
}

// ===================================================================

class GetReply::_Internal {
 public:
};

GetReply::GetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.GetReply)
}
GetReply::GetReply(const GetReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.getsuccess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.getsuccess_ = from._impl_.getsuccess_;
  // @@protoc_insertion_point(copy_constructor:proxy_proto.GetReply)
}

inline void GetReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.getsuccess_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetReply::~GetReply() {
  // @@protoc_insertion_point(destructor:proxy_proto.GetReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.GetReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.getsuccess_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool getsuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.getsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.GetReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool getsuccess = 1;
  if (this->_internal_getsuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_getsuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.GetReply)
  return target;
}

size_t GetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.GetReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool getsuccess = 1;
  if (this->_internal_getsuccess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReply::GetClassData() const { return &_class_data_; }


void GetReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetReply*>(&to_msg);
  auto& from = static_cast<const GetReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.GetReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_getsuccess() != 0) {
    _this->_internal_set_getsuccess(from._internal_getsuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReply::CopyFrom(const GetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.GetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReply::IsInitialized() const {
  return true;
}

void GetReply::InternalSwap(GetReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.getsuccess_, other->_impl_.getsuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proxy_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proxy_proto::CheckaliveCMD*
Arena::CreateMaybeMessage< ::proxy_proto::CheckaliveCMD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::CheckaliveCMD >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::RequestResult*
Arena::CreateMaybeMessage< ::proxy_proto::RequestResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::RequestResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::ObjectAndPlacement*
Arena::CreateMaybeMessage< ::proxy_proto::ObjectAndPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::ObjectAndPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::SetReply*
Arena::CreateMaybeMessage< ::proxy_proto::SetReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::SetReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::GetReply*
Arena::CreateMaybeMessage< ::proxy_proto::GetReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::GetReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
