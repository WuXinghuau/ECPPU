// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordinator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_coordinator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_coordinator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_coordinator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_coordinator_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_coordinator_2eproto;
namespace coordinator_proto {
class AskIfSetSucess;
struct AskIfSetSucessDefaultTypeInternal;
extern AskIfSetSucessDefaultTypeInternal _AskIfSetSucess_default_instance_;
class CommitAbortKey;
struct CommitAbortKeyDefaultTypeInternal;
extern CommitAbortKeyDefaultTypeInternal _CommitAbortKey_default_instance_;
class KeyAndClientIP;
struct KeyAndClientIPDefaultTypeInternal;
extern KeyAndClientIPDefaultTypeInternal _KeyAndClientIP_default_instance_;
class RepIfGetSucess;
struct RepIfGetSucessDefaultTypeInternal;
extern RepIfGetSucessDefaultTypeInternal _RepIfGetSucess_default_instance_;
class RepIfSetSucess;
struct RepIfSetSucessDefaultTypeInternal;
extern RepIfSetSucessDefaultTypeInternal _RepIfSetSucess_default_instance_;
class ReplyFromCoordinator;
struct ReplyFromCoordinatorDefaultTypeInternal;
extern ReplyFromCoordinatorDefaultTypeInternal _ReplyFromCoordinator_default_instance_;
class ReplyProxyIPPort;
struct ReplyProxyIPPortDefaultTypeInternal;
extern ReplyProxyIPPortDefaultTypeInternal _ReplyProxyIPPort_default_instance_;
class RequestProxyIPPort;
struct RequestProxyIPPortDefaultTypeInternal;
extern RequestProxyIPPortDefaultTypeInternal _RequestProxyIPPort_default_instance_;
class RequestToCoordinator;
struct RequestToCoordinatorDefaultTypeInternal;
extern RequestToCoordinatorDefaultTypeInternal _RequestToCoordinator_default_instance_;
}  // namespace coordinator_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::coordinator_proto::AskIfSetSucess* Arena::CreateMaybeMessage<::coordinator_proto::AskIfSetSucess>(Arena*);
template<> ::coordinator_proto::CommitAbortKey* Arena::CreateMaybeMessage<::coordinator_proto::CommitAbortKey>(Arena*);
template<> ::coordinator_proto::KeyAndClientIP* Arena::CreateMaybeMessage<::coordinator_proto::KeyAndClientIP>(Arena*);
template<> ::coordinator_proto::RepIfGetSucess* Arena::CreateMaybeMessage<::coordinator_proto::RepIfGetSucess>(Arena*);
template<> ::coordinator_proto::RepIfSetSucess* Arena::CreateMaybeMessage<::coordinator_proto::RepIfSetSucess>(Arena*);
template<> ::coordinator_proto::ReplyFromCoordinator* Arena::CreateMaybeMessage<::coordinator_proto::ReplyFromCoordinator>(Arena*);
template<> ::coordinator_proto::ReplyProxyIPPort* Arena::CreateMaybeMessage<::coordinator_proto::ReplyProxyIPPort>(Arena*);
template<> ::coordinator_proto::RequestProxyIPPort* Arena::CreateMaybeMessage<::coordinator_proto::RequestProxyIPPort>(Arena*);
template<> ::coordinator_proto::RequestToCoordinator* Arena::CreateMaybeMessage<::coordinator_proto::RequestToCoordinator>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace coordinator_proto {

// ===================================================================

class RequestToCoordinator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.RequestToCoordinator) */ {
 public:
  inline RequestToCoordinator() : RequestToCoordinator(nullptr) {}
  ~RequestToCoordinator() override;
  explicit PROTOBUF_CONSTEXPR RequestToCoordinator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestToCoordinator(const RequestToCoordinator& from);
  RequestToCoordinator(RequestToCoordinator&& from) noexcept
    : RequestToCoordinator() {
    *this = ::std::move(from);
  }

  inline RequestToCoordinator& operator=(const RequestToCoordinator& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestToCoordinator& operator=(RequestToCoordinator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestToCoordinator& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestToCoordinator* internal_default_instance() {
    return reinterpret_cast<const RequestToCoordinator*>(
               &_RequestToCoordinator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestToCoordinator& a, RequestToCoordinator& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestToCoordinator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestToCoordinator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestToCoordinator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestToCoordinator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestToCoordinator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestToCoordinator& from) {
    RequestToCoordinator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestToCoordinator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.RequestToCoordinator";
  }
  protected:
  explicit RequestToCoordinator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.RequestToCoordinator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class ReplyFromCoordinator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.ReplyFromCoordinator) */ {
 public:
  inline ReplyFromCoordinator() : ReplyFromCoordinator(nullptr) {}
  ~ReplyFromCoordinator() override;
  explicit PROTOBUF_CONSTEXPR ReplyFromCoordinator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplyFromCoordinator(const ReplyFromCoordinator& from);
  ReplyFromCoordinator(ReplyFromCoordinator&& from) noexcept
    : ReplyFromCoordinator() {
    *this = ::std::move(from);
  }

  inline ReplyFromCoordinator& operator=(const ReplyFromCoordinator& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyFromCoordinator& operator=(ReplyFromCoordinator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplyFromCoordinator& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplyFromCoordinator* internal_default_instance() {
    return reinterpret_cast<const ReplyFromCoordinator*>(
               &_ReplyFromCoordinator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReplyFromCoordinator& a, ReplyFromCoordinator& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyFromCoordinator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplyFromCoordinator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplyFromCoordinator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplyFromCoordinator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplyFromCoordinator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplyFromCoordinator& from) {
    ReplyFromCoordinator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyFromCoordinator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.ReplyFromCoordinator";
  }
  protected:
  explicit ReplyFromCoordinator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.ReplyFromCoordinator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class RequestProxyIPPort final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.RequestProxyIPPort) */ {
 public:
  inline RequestProxyIPPort() : RequestProxyIPPort(nullptr) {}
  ~RequestProxyIPPort() override;
  explicit PROTOBUF_CONSTEXPR RequestProxyIPPort(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestProxyIPPort(const RequestProxyIPPort& from);
  RequestProxyIPPort(RequestProxyIPPort&& from) noexcept
    : RequestProxyIPPort() {
    *this = ::std::move(from);
  }

  inline RequestProxyIPPort& operator=(const RequestProxyIPPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestProxyIPPort& operator=(RequestProxyIPPort&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestProxyIPPort& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestProxyIPPort* internal_default_instance() {
    return reinterpret_cast<const RequestProxyIPPort*>(
               &_RequestProxyIPPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestProxyIPPort& a, RequestProxyIPPort& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestProxyIPPort* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestProxyIPPort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestProxyIPPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestProxyIPPort>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestProxyIPPort& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestProxyIPPort& from) {
    RequestProxyIPPort::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestProxyIPPort* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.RequestProxyIPPort";
  }
  protected:
  explicit RequestProxyIPPort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValuesizebytesFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 valuesizebytes = 2;
  void clear_valuesizebytes();
  int32_t valuesizebytes() const;
  void set_valuesizebytes(int32_t value);
  private:
  int32_t _internal_valuesizebytes() const;
  void _internal_set_valuesizebytes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.RequestProxyIPPort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    int32_t valuesizebytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class ReplyProxyIPPort final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.ReplyProxyIPPort) */ {
 public:
  inline ReplyProxyIPPort() : ReplyProxyIPPort(nullptr) {}
  ~ReplyProxyIPPort() override;
  explicit PROTOBUF_CONSTEXPR ReplyProxyIPPort(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplyProxyIPPort(const ReplyProxyIPPort& from);
  ReplyProxyIPPort(ReplyProxyIPPort&& from) noexcept
    : ReplyProxyIPPort() {
    *this = ::std::move(from);
  }

  inline ReplyProxyIPPort& operator=(const ReplyProxyIPPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyProxyIPPort& operator=(ReplyProxyIPPort&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplyProxyIPPort& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplyProxyIPPort* internal_default_instance() {
    return reinterpret_cast<const ReplyProxyIPPort*>(
               &_ReplyProxyIPPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReplyProxyIPPort& a, ReplyProxyIPPort& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyProxyIPPort* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplyProxyIPPort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplyProxyIPPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplyProxyIPPort>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplyProxyIPPort& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplyProxyIPPort& from) {
    ReplyProxyIPPort::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyProxyIPPort* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.ReplyProxyIPPort";
  }
  protected:
  explicit ReplyProxyIPPort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProxyIPFieldNumber = 1,
    kProxyPortFieldNumber = 2,
  };
  // string proxyIP = 1;
  void clear_proxyip();
  const std::string& proxyip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proxyip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proxyip();
  PROTOBUF_NODISCARD std::string* release_proxyip();
  void set_allocated_proxyip(std::string* proxyip);
  private:
  const std::string& _internal_proxyip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proxyip(const std::string& value);
  std::string* _internal_mutable_proxyip();
  public:

  // int32 proxyPort = 2;
  void clear_proxyport();
  int32_t proxyport() const;
  void set_proxyport(int32_t value);
  private:
  int32_t _internal_proxyport() const;
  void _internal_set_proxyport(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.ReplyProxyIPPort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxyip_;
    int32_t proxyport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class CommitAbortKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.CommitAbortKey) */ {
 public:
  inline CommitAbortKey() : CommitAbortKey(nullptr) {}
  ~CommitAbortKey() override;
  explicit PROTOBUF_CONSTEXPR CommitAbortKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommitAbortKey(const CommitAbortKey& from);
  CommitAbortKey(CommitAbortKey&& from) noexcept
    : CommitAbortKey() {
    *this = ::std::move(from);
  }

  inline CommitAbortKey& operator=(const CommitAbortKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitAbortKey& operator=(CommitAbortKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitAbortKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitAbortKey* internal_default_instance() {
    return reinterpret_cast<const CommitAbortKey*>(
               &_CommitAbortKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommitAbortKey& a, CommitAbortKey& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitAbortKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitAbortKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitAbortKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommitAbortKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommitAbortKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommitAbortKey& from) {
    CommitAbortKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitAbortKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.CommitAbortKey";
  }
  protected:
  explicit CommitAbortKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kIfcommitMetaDataFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bool ifcommitMetaData = 2;
  void clear_ifcommitmetadata();
  bool ifcommitmetadata() const;
  void set_ifcommitmetadata(bool value);
  private:
  bool _internal_ifcommitmetadata() const;
  void _internal_set_ifcommitmetadata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.CommitAbortKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    bool ifcommitmetadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class AskIfSetSucess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.AskIfSetSucess) */ {
 public:
  inline AskIfSetSucess() : AskIfSetSucess(nullptr) {}
  ~AskIfSetSucess() override;
  explicit PROTOBUF_CONSTEXPR AskIfSetSucess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AskIfSetSucess(const AskIfSetSucess& from);
  AskIfSetSucess(AskIfSetSucess&& from) noexcept
    : AskIfSetSucess() {
    *this = ::std::move(from);
  }

  inline AskIfSetSucess& operator=(const AskIfSetSucess& from) {
    CopyFrom(from);
    return *this;
  }
  inline AskIfSetSucess& operator=(AskIfSetSucess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AskIfSetSucess& default_instance() {
    return *internal_default_instance();
  }
  static inline const AskIfSetSucess* internal_default_instance() {
    return reinterpret_cast<const AskIfSetSucess*>(
               &_AskIfSetSucess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AskIfSetSucess& a, AskIfSetSucess& b) {
    a.Swap(&b);
  }
  inline void Swap(AskIfSetSucess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AskIfSetSucess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AskIfSetSucess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AskIfSetSucess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AskIfSetSucess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AskIfSetSucess& from) {
    AskIfSetSucess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AskIfSetSucess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.AskIfSetSucess";
  }
  protected:
  explicit AskIfSetSucess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.AskIfSetSucess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class RepIfSetSucess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.RepIfSetSucess) */ {
 public:
  inline RepIfSetSucess() : RepIfSetSucess(nullptr) {}
  ~RepIfSetSucess() override;
  explicit PROTOBUF_CONSTEXPR RepIfSetSucess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepIfSetSucess(const RepIfSetSucess& from);
  RepIfSetSucess(RepIfSetSucess&& from) noexcept
    : RepIfSetSucess() {
    *this = ::std::move(from);
  }

  inline RepIfSetSucess& operator=(const RepIfSetSucess& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepIfSetSucess& operator=(RepIfSetSucess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepIfSetSucess& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepIfSetSucess* internal_default_instance() {
    return reinterpret_cast<const RepIfSetSucess*>(
               &_RepIfSetSucess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RepIfSetSucess& a, RepIfSetSucess& b) {
    a.Swap(&b);
  }
  inline void Swap(RepIfSetSucess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepIfSetSucess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepIfSetSucess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepIfSetSucess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepIfSetSucess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepIfSetSucess& from) {
    RepIfSetSucess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepIfSetSucess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.RepIfSetSucess";
  }
  protected:
  explicit RepIfSetSucess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfcommitFieldNumber = 1,
  };
  // bool ifcommit = 1;
  void clear_ifcommit();
  bool ifcommit() const;
  void set_ifcommit(bool value);
  private:
  bool _internal_ifcommit() const;
  void _internal_set_ifcommit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.RepIfSetSucess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ifcommit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class KeyAndClientIP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.KeyAndClientIP) */ {
 public:
  inline KeyAndClientIP() : KeyAndClientIP(nullptr) {}
  ~KeyAndClientIP() override;
  explicit PROTOBUF_CONSTEXPR KeyAndClientIP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyAndClientIP(const KeyAndClientIP& from);
  KeyAndClientIP(KeyAndClientIP&& from) noexcept
    : KeyAndClientIP() {
    *this = ::std::move(from);
  }

  inline KeyAndClientIP& operator=(const KeyAndClientIP& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyAndClientIP& operator=(KeyAndClientIP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyAndClientIP& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyAndClientIP* internal_default_instance() {
    return reinterpret_cast<const KeyAndClientIP*>(
               &_KeyAndClientIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(KeyAndClientIP& a, KeyAndClientIP& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyAndClientIP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyAndClientIP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyAndClientIP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyAndClientIP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyAndClientIP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyAndClientIP& from) {
    KeyAndClientIP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyAndClientIP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.KeyAndClientIP";
  }
  protected:
  explicit KeyAndClientIP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kClientipFieldNumber = 2,
    kClientportFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string clientip = 2;
  void clear_clientip();
  const std::string& clientip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientip();
  PROTOBUF_NODISCARD std::string* release_clientip();
  void set_allocated_clientip(std::string* clientip);
  private:
  const std::string& _internal_clientip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientip(const std::string& value);
  std::string* _internal_mutable_clientip();
  public:

  // int32 clientport = 3;
  void clear_clientport();
  int32_t clientport() const;
  void set_clientport(int32_t value);
  private:
  int32_t _internal_clientport() const;
  void _internal_set_clientport(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.KeyAndClientIP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientip_;
    int32_t clientport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class RepIfGetSucess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.RepIfGetSucess) */ {
 public:
  inline RepIfGetSucess() : RepIfGetSucess(nullptr) {}
  ~RepIfGetSucess() override;
  explicit PROTOBUF_CONSTEXPR RepIfGetSucess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepIfGetSucess(const RepIfGetSucess& from);
  RepIfGetSucess(RepIfGetSucess&& from) noexcept
    : RepIfGetSucess() {
    *this = ::std::move(from);
  }

  inline RepIfGetSucess& operator=(const RepIfGetSucess& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepIfGetSucess& operator=(RepIfGetSucess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepIfGetSucess& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepIfGetSucess* internal_default_instance() {
    return reinterpret_cast<const RepIfGetSucess*>(
               &_RepIfGetSucess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RepIfGetSucess& a, RepIfGetSucess& b) {
    a.Swap(&b);
  }
  inline void Swap(RepIfGetSucess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepIfGetSucess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepIfGetSucess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepIfGetSucess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepIfGetSucess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepIfGetSucess& from) {
    RepIfGetSucess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepIfGetSucess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.RepIfGetSucess";
  }
  protected:
  explicit RepIfGetSucess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfgetsucessFieldNumber = 1,
  };
  // bool ifgetsucess = 1;
  void clear_ifgetsucess();
  bool ifgetsucess() const;
  void set_ifgetsucess(bool value);
  private:
  bool _internal_ifgetsucess() const;
  void _internal_set_ifgetsucess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.RepIfGetSucess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ifgetsucess_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestToCoordinator

// string name = 1;
inline void RequestToCoordinator::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RequestToCoordinator::name() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RequestToCoordinator.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestToCoordinator::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.RequestToCoordinator.name)
}
inline std::string* RequestToCoordinator::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.RequestToCoordinator.name)
  return _s;
}
inline const std::string& RequestToCoordinator::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RequestToCoordinator::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestToCoordinator::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestToCoordinator::release_name() {
  // @@protoc_insertion_point(field_release:coordinator_proto.RequestToCoordinator.name)
  return _impl_.name_.Release();
}
inline void RequestToCoordinator::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.RequestToCoordinator.name)
}

// -------------------------------------------------------------------

// ReplyFromCoordinator

// string message = 1;
inline void ReplyFromCoordinator::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ReplyFromCoordinator::message() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.ReplyFromCoordinator.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplyFromCoordinator::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.ReplyFromCoordinator.message)
}
inline std::string* ReplyFromCoordinator::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.ReplyFromCoordinator.message)
  return _s;
}
inline const std::string& ReplyFromCoordinator::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ReplyFromCoordinator::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplyFromCoordinator::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplyFromCoordinator::release_message() {
  // @@protoc_insertion_point(field_release:coordinator_proto.ReplyFromCoordinator.message)
  return _impl_.message_.Release();
}
inline void ReplyFromCoordinator::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.ReplyFromCoordinator.message)
}

// -------------------------------------------------------------------

// RequestProxyIPPort

// string key = 1;
inline void RequestProxyIPPort::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& RequestProxyIPPort::key() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RequestProxyIPPort.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestProxyIPPort::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.RequestProxyIPPort.key)
}
inline std::string* RequestProxyIPPort::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.RequestProxyIPPort.key)
  return _s;
}
inline const std::string& RequestProxyIPPort::_internal_key() const {
  return _impl_.key_.Get();
}
inline void RequestProxyIPPort::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestProxyIPPort::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestProxyIPPort::release_key() {
  // @@protoc_insertion_point(field_release:coordinator_proto.RequestProxyIPPort.key)
  return _impl_.key_.Release();
}
inline void RequestProxyIPPort::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.RequestProxyIPPort.key)
}

// int32 valuesizebytes = 2;
inline void RequestProxyIPPort::clear_valuesizebytes() {
  _impl_.valuesizebytes_ = 0;
}
inline int32_t RequestProxyIPPort::_internal_valuesizebytes() const {
  return _impl_.valuesizebytes_;
}
inline int32_t RequestProxyIPPort::valuesizebytes() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RequestProxyIPPort.valuesizebytes)
  return _internal_valuesizebytes();
}
inline void RequestProxyIPPort::_internal_set_valuesizebytes(int32_t value) {
  
  _impl_.valuesizebytes_ = value;
}
inline void RequestProxyIPPort::set_valuesizebytes(int32_t value) {
  _internal_set_valuesizebytes(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RequestProxyIPPort.valuesizebytes)
}

// -------------------------------------------------------------------

// ReplyProxyIPPort

// string proxyIP = 1;
inline void ReplyProxyIPPort::clear_proxyip() {
  _impl_.proxyip_.ClearToEmpty();
}
inline const std::string& ReplyProxyIPPort::proxyip() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.ReplyProxyIPPort.proxyIP)
  return _internal_proxyip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplyProxyIPPort::set_proxyip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.proxyip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.ReplyProxyIPPort.proxyIP)
}
inline std::string* ReplyProxyIPPort::mutable_proxyip() {
  std::string* _s = _internal_mutable_proxyip();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.ReplyProxyIPPort.proxyIP)
  return _s;
}
inline const std::string& ReplyProxyIPPort::_internal_proxyip() const {
  return _impl_.proxyip_.Get();
}
inline void ReplyProxyIPPort::_internal_set_proxyip(const std::string& value) {
  
  _impl_.proxyip_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplyProxyIPPort::_internal_mutable_proxyip() {
  
  return _impl_.proxyip_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplyProxyIPPort::release_proxyip() {
  // @@protoc_insertion_point(field_release:coordinator_proto.ReplyProxyIPPort.proxyIP)
  return _impl_.proxyip_.Release();
}
inline void ReplyProxyIPPort::set_allocated_proxyip(std::string* proxyip) {
  if (proxyip != nullptr) {
    
  } else {
    
  }
  _impl_.proxyip_.SetAllocated(proxyip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proxyip_.IsDefault()) {
    _impl_.proxyip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.ReplyProxyIPPort.proxyIP)
}

// int32 proxyPort = 2;
inline void ReplyProxyIPPort::clear_proxyport() {
  _impl_.proxyport_ = 0;
}
inline int32_t ReplyProxyIPPort::_internal_proxyport() const {
  return _impl_.proxyport_;
}
inline int32_t ReplyProxyIPPort::proxyport() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.ReplyProxyIPPort.proxyPort)
  return _internal_proxyport();
}
inline void ReplyProxyIPPort::_internal_set_proxyport(int32_t value) {
  
  _impl_.proxyport_ = value;
}
inline void ReplyProxyIPPort::set_proxyport(int32_t value) {
  _internal_set_proxyport(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.ReplyProxyIPPort.proxyPort)
}

// -------------------------------------------------------------------

// CommitAbortKey

// string key = 1;
inline void CommitAbortKey::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& CommitAbortKey::key() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.CommitAbortKey.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommitAbortKey::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.CommitAbortKey.key)
}
inline std::string* CommitAbortKey::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.CommitAbortKey.key)
  return _s;
}
inline const std::string& CommitAbortKey::_internal_key() const {
  return _impl_.key_.Get();
}
inline void CommitAbortKey::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* CommitAbortKey::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* CommitAbortKey::release_key() {
  // @@protoc_insertion_point(field_release:coordinator_proto.CommitAbortKey.key)
  return _impl_.key_.Release();
}
inline void CommitAbortKey::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.CommitAbortKey.key)
}

// bool ifcommitMetaData = 2;
inline void CommitAbortKey::clear_ifcommitmetadata() {
  _impl_.ifcommitmetadata_ = false;
}
inline bool CommitAbortKey::_internal_ifcommitmetadata() const {
  return _impl_.ifcommitmetadata_;
}
inline bool CommitAbortKey::ifcommitmetadata() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.CommitAbortKey.ifcommitMetaData)
  return _internal_ifcommitmetadata();
}
inline void CommitAbortKey::_internal_set_ifcommitmetadata(bool value) {
  
  _impl_.ifcommitmetadata_ = value;
}
inline void CommitAbortKey::set_ifcommitmetadata(bool value) {
  _internal_set_ifcommitmetadata(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.CommitAbortKey.ifcommitMetaData)
}

// -------------------------------------------------------------------

// AskIfSetSucess

// string key = 1;
inline void AskIfSetSucess::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& AskIfSetSucess::key() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.AskIfSetSucess.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AskIfSetSucess::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.AskIfSetSucess.key)
}
inline std::string* AskIfSetSucess::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.AskIfSetSucess.key)
  return _s;
}
inline const std::string& AskIfSetSucess::_internal_key() const {
  return _impl_.key_.Get();
}
inline void AskIfSetSucess::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* AskIfSetSucess::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* AskIfSetSucess::release_key() {
  // @@protoc_insertion_point(field_release:coordinator_proto.AskIfSetSucess.key)
  return _impl_.key_.Release();
}
inline void AskIfSetSucess::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.AskIfSetSucess.key)
}

// -------------------------------------------------------------------

// RepIfSetSucess

// bool ifcommit = 1;
inline void RepIfSetSucess::clear_ifcommit() {
  _impl_.ifcommit_ = false;
}
inline bool RepIfSetSucess::_internal_ifcommit() const {
  return _impl_.ifcommit_;
}
inline bool RepIfSetSucess::ifcommit() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RepIfSetSucess.ifcommit)
  return _internal_ifcommit();
}
inline void RepIfSetSucess::_internal_set_ifcommit(bool value) {
  
  _impl_.ifcommit_ = value;
}
inline void RepIfSetSucess::set_ifcommit(bool value) {
  _internal_set_ifcommit(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RepIfSetSucess.ifcommit)
}

// -------------------------------------------------------------------

// KeyAndClientIP

// string key = 1;
inline void KeyAndClientIP::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KeyAndClientIP::key() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.KeyAndClientIP.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyAndClientIP::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.KeyAndClientIP.key)
}
inline std::string* KeyAndClientIP::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.KeyAndClientIP.key)
  return _s;
}
inline const std::string& KeyAndClientIP::_internal_key() const {
  return _impl_.key_.Get();
}
inline void KeyAndClientIP::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyAndClientIP::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyAndClientIP::release_key() {
  // @@protoc_insertion_point(field_release:coordinator_proto.KeyAndClientIP.key)
  return _impl_.key_.Release();
}
inline void KeyAndClientIP::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.KeyAndClientIP.key)
}

// string clientip = 2;
inline void KeyAndClientIP::clear_clientip() {
  _impl_.clientip_.ClearToEmpty();
}
inline const std::string& KeyAndClientIP::clientip() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.KeyAndClientIP.clientip)
  return _internal_clientip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyAndClientIP::set_clientip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.KeyAndClientIP.clientip)
}
inline std::string* KeyAndClientIP::mutable_clientip() {
  std::string* _s = _internal_mutable_clientip();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.KeyAndClientIP.clientip)
  return _s;
}
inline const std::string& KeyAndClientIP::_internal_clientip() const {
  return _impl_.clientip_.Get();
}
inline void KeyAndClientIP::_internal_set_clientip(const std::string& value) {
  
  _impl_.clientip_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyAndClientIP::_internal_mutable_clientip() {
  
  return _impl_.clientip_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyAndClientIP::release_clientip() {
  // @@protoc_insertion_point(field_release:coordinator_proto.KeyAndClientIP.clientip)
  return _impl_.clientip_.Release();
}
inline void KeyAndClientIP::set_allocated_clientip(std::string* clientip) {
  if (clientip != nullptr) {
    
  } else {
    
  }
  _impl_.clientip_.SetAllocated(clientip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientip_.IsDefault()) {
    _impl_.clientip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.KeyAndClientIP.clientip)
}

// int32 clientport = 3;
inline void KeyAndClientIP::clear_clientport() {
  _impl_.clientport_ = 0;
}
inline int32_t KeyAndClientIP::_internal_clientport() const {
  return _impl_.clientport_;
}
inline int32_t KeyAndClientIP::clientport() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.KeyAndClientIP.clientport)
  return _internal_clientport();
}
inline void KeyAndClientIP::_internal_set_clientport(int32_t value) {
  
  _impl_.clientport_ = value;
}
inline void KeyAndClientIP::set_clientport(int32_t value) {
  _internal_set_clientport(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.KeyAndClientIP.clientport)
}

// -------------------------------------------------------------------

// RepIfGetSucess

// bool ifgetsucess = 1;
inline void RepIfGetSucess::clear_ifgetsucess() {
  _impl_.ifgetsucess_ = false;
}
inline bool RepIfGetSucess::_internal_ifgetsucess() const {
  return _impl_.ifgetsucess_;
}
inline bool RepIfGetSucess::ifgetsucess() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RepIfGetSucess.ifgetsucess)
  return _internal_ifgetsucess();
}
inline void RepIfGetSucess::_internal_set_ifgetsucess(bool value) {
  
  _impl_.ifgetsucess_ = value;
}
inline void RepIfGetSucess::set_ifgetsucess(bool value) {
  _internal_set_ifgetsucess(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RepIfGetSucess.ifgetsucess)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace coordinator_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_coordinator_2eproto
