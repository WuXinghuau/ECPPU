// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package proxy_proto;

// The greeting service definition.
service proxyService {
  // Sends a greeting
  rpc checkalive (CheckaliveCMD) returns (RequestResult);
  rpc EncodeAndSetObject(ObjectAndPlacement) returns (SetReply);
  rpc WriteBufferAndEncode(ObjectAndPlacement) returns (SetReply);
  rpc decodeAndGetObject(ObjectAndPlacement) returns (GetReply);
  rpc getObjectFromBuffer(ObjectAndPlacement) returns (GetReply);
  rpc mainRepair(mainRepairPlan) returns (mainRepairReply);
  rpc helpRepair(helpRepairPlan) returns (helpRepairReply);

  //update
  rpc dataProxyUpdate(DataProxyUpdatePlan) returns(DataProxyReply);
  rpc collectorProxyUpdate(CollectorProxyUpdatePlan) returns(CollectorProxyReply);
  rpc dataProxyRMW(DataProxyUpdatePlan) returns(DataProxyReply);
  rpc dataProxyRCW(DataProxyUpdatePlan) returns(DataProxyReply);
  rpc ReconstructWrite(ReconstructWriteNotice) returns(DataProxyReply);
  rpc PARIXUpdate(DataProxyUpdatePlan) returns(DataProxyReply);
  //versioned update
  rpc dataProxyPURMW(PURMWNotice) returns (PURMWResponse);
  rpc TimeoutRCW(ReconstructWriteNotice) returns (DataProxyReply);//out of time
  rpc VersionedRCW(VersionRCWNotice) returns (DataProxyReply);
}

message mainRepairPlan {
  bool one_shard_fail = 1;
  bool multi_az = 2;
  int32 k = 3;
  int32 real_l = 4;
  int32 g = 5;
  int32 b = 6;
  int32 self_az_id = 7;
  bool if_partial_decoding = 8;
  int32 stripe_id = 9;
  int32 shard_size = 10;
  int32 encode_type = 11;
  repeated int32 help_azs_id = 12;
  repeated bool merge = 13;
  repeated string new_location_ip = 14;
  repeated int32 new_location_port = 15;
  repeated int32 new_location_shard_idx = 16;
  repeated int32 all_failed_shards_idx = 17;
  repeated string inner_az_help_shards_ip = 18;
  repeated int32 inner_az_help_shards_port = 19;
  repeated int32 inner_az_help_shards_idx = 20;
}

message helpRepairPlan {
  bool one_shard_fail = 1;
  bool multi_az = 2;
  int32 k = 3;
  int32 real_l = 4;
  int32 g = 5;
  int32 b = 6;
  int32 self_az_id = 7;
  bool if_partial_decoding = 8;
  int32 stripe_id = 9;
  string main_proxy_ip = 10;
  int32 main_proxy_port = 11;
  int32 shard_size = 12;
  int32 encode_type = 13;
  int32 failed_shard_idx = 14;
  bool merge = 15;
  repeated int32 all_failed_shards_idx = 16;
  repeated string inner_az_help_shards_ip = 17;
  repeated int32 inner_az_help_shards_port = 18;
  repeated int32 inner_az_help_shards_idx = 19;
}

message mainRepairReply {
  string result = 1;
}

message helpRepairReply {
  string result = 1;
}

// The request message containing the user's name.
message CheckaliveCMD {
  string name = 1;
}

// The response message containing the greetings
message RequestResult {
  bool message = 1;
}

message ObjectAndPlacement{
  bool bigobject = 1;
  string key = 2;
  int32 valuesizebyte = 3;
  int32 k = 4;
  int32 m = 5;
  int32 real_l = 6;
  repeated int32 stripe_ids = 7;
  repeated string datanodeip = 8;
  repeated int32 datanodeport = 9;
  int32 shard_size = 10;
  int32 tail_shard_size = 11;
  string clientip = 12;
  int32 clientport = 13;
  int32 encode_type = 14;
  int32 b = 15;
  int32 writebufferindex = 16;
  int32 shard_idx = 17;
  int32 offset = 18;
  int32 obj_size = 19;
}
message SetReply {
  bool ifcommit = 1;
}
message GetReply {
  bool getsuccess = 1;
}
message DataProxyUpdatePlan{
  string key=1;
  int32 stripeid=2;


  StripeUpdateInfo client_info=50;
  
  int32 update_opration_id=11;
  string collector_proxyip=12;
  int32 collector_proxyport=13;
  int32 encode_type=14;
  int32 k=15;
  int32 real_l=16;
  int32 g_m=17;
  int32 shard_update_len=18;
  int32 shard_update_offset=19;
  int32 receive_delta_cross_AZ_num=23;//parity delta or data delta
  int32 update_operation_id=24;

}
message CollectorProxyUpdatePlan{
  string key=1;
  int32 stripeid=2;
  
  StripeUpdateInfo client_info=3;

  int32 data_proxy_num=5;
  int32 encode_type=6;
  
  int32 big_small_update=7;//大的使用shard_size 编码 小的使用length
  int32 shard_size=8;

  int32 k=9;
  int32 real_l=10;
  int32 g_m=11;
  int32 shard_update_len=12;
  int32 shard_update_offset=13;
  

  RSCrossAZUpdate rs_cross_az=21;
  OPPOLRCCrossAZUpdate oppo_lrc_cross_az=22;
  AzureLRC_1CrossAZUpdate azure_lrc1_cross_az=23;
  
  int32 update_operation_id=25;
}


message DataProxyReply{
  string result=1;
  int32 update_operation_id=2;
}


message CollectorProxyReply{
  string result=1;
  int32 update_operation_id=2;
}

message StripeUpdateInfo{
  repeated int32 receive_client_shard_idx=1;
  repeated int32 receive_client_shard_offset=2;
  repeated int32 receive_client_shard_length=3;
  repeated string data_nodeip=4;
  repeated int32 data_nodeport=5;
  repeated int32 local_parity_idx=9;
  repeated string local_parity_nodeip=10;
  repeated int32 local_parity_nodeport=11;

  repeated int32 global_parity_idx=12;//global parity in this AZ
  repeated string global_parity_nodeip=13;
  repeated int32 global_parity_nodeport=14;
}

message RSCrossAZUpdate{
  repeated string nodeip=1;   //更新数据最多的AZ是collector
  repeated int32 nodeport=2;
  //repeated ParityCalculateCoefficient coeffs=3;
  repeated int32 global_parity_idx=3;
  
  repeated string proxyip=4;
  repeated int32 proxyport=5;
  repeated int32 num_each_proxy=6;
  repeated int32 data_shard_idx=7;//RS 给Proxy发肯定是data delta
}



message OPPOLRCCrossAZUpdate{//都是发送到有校验块proxy 
  repeated string proxyip=1;
  repeated int32 proxyport=2;
  repeated int32 sendflag=3;//确定给proxy发data delta 0detadelta
  repeated int32 num_each_proxy=4;//data delta记为更新的块数
  repeated int32 to_proxy_global_parity_idx=5;
  repeated int32 data_shard_idx=6;
}

message AzureLRC_1CrossAZUpdate{//
  repeated string nodeip=1;
  repeated int32 nodeport=2;
  repeated int32 to_node_global_parity_idx=3;
  string proxyip=4;
  int32 proxyport=5;
  repeated int32 sendflag=6;//确定给proxy发data delta
  repeated int32 num_each_proxy=7;
  //repeated ParityCalculateCoefficient proxy_coeffs=8;
  repeated int32 to_proxy_global_parity_idx=8;
  repeated int32 data_shard_idx=9;
}


message ReconstructWriteNotice{//重构写
  int32 stripeid=1;
  repeated string nodeip=3;
  repeated int32 nodeport=4;
  int32 k = 5;
  int32 m = 6;
  int32 real_l = 7;
  int32 shard_size=8;
  int32 encode_type = 9;
  
}

message PURMWResponse{
  string result=1;
  int32 update_operation_id=2;
  repeated int32 success_parity_idx=3;

}

message PURMWNotice{
  DataProxyUpdatePlan data_proxy_plan=1;
  repeated int32 latest_data_version=2;
  int32 minimal_tolerance=3;
  int32 max_wait_time_ms=4;
}

message VersionRCWNotice{
  ReconstructWriteNotice base_rcw_info=1;
  repeated int32 v_version=2;
}

