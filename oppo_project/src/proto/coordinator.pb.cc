// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordinator.proto

#include "coordinator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace coordinator_proto {
PROTOBUF_CONSTEXPR RequestToCoordinator::RequestToCoordinator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestToCoordinatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestToCoordinatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestToCoordinatorDefaultTypeInternal() {}
  union {
    RequestToCoordinator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestToCoordinatorDefaultTypeInternal _RequestToCoordinator_default_instance_;
PROTOBUF_CONSTEXPR ReplyFromCoordinator::ReplyFromCoordinator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReplyFromCoordinatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplyFromCoordinatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplyFromCoordinatorDefaultTypeInternal() {}
  union {
    ReplyFromCoordinator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplyFromCoordinatorDefaultTypeInternal _ReplyFromCoordinator_default_instance_;
PROTOBUF_CONSTEXPR RequestProxyIPPort::RequestProxyIPPort(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.valuesizebytes_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestProxyIPPortDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestProxyIPPortDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestProxyIPPortDefaultTypeInternal() {}
  union {
    RequestProxyIPPort _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestProxyIPPortDefaultTypeInternal _RequestProxyIPPort_default_instance_;
PROTOBUF_CONSTEXPR ReplyProxyIPPort::ReplyProxyIPPort(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proxyip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proxyport_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReplyProxyIPPortDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplyProxyIPPortDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplyProxyIPPortDefaultTypeInternal() {}
  union {
    ReplyProxyIPPort _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplyProxyIPPortDefaultTypeInternal _ReplyProxyIPPort_default_instance_;
PROTOBUF_CONSTEXPR CommitAbortKey::CommitAbortKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ifcommitmetadata_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommitAbortKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitAbortKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitAbortKeyDefaultTypeInternal() {}
  union {
    CommitAbortKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitAbortKeyDefaultTypeInternal _CommitAbortKey_default_instance_;
PROTOBUF_CONSTEXPR AskIfSetSucess::AskIfSetSucess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AskIfSetSucessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AskIfSetSucessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AskIfSetSucessDefaultTypeInternal() {}
  union {
    AskIfSetSucess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AskIfSetSucessDefaultTypeInternal _AskIfSetSucess_default_instance_;
PROTOBUF_CONSTEXPR RepIfSetSucess::RepIfSetSucess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ifcommit_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RepIfSetSucessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RepIfSetSucessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RepIfSetSucessDefaultTypeInternal() {}
  union {
    RepIfSetSucess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RepIfSetSucessDefaultTypeInternal _RepIfSetSucess_default_instance_;
PROTOBUF_CONSTEXPR KeyAndClientIP::KeyAndClientIP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientport_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyAndClientIPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyAndClientIPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyAndClientIPDefaultTypeInternal() {}
  union {
    KeyAndClientIP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyAndClientIPDefaultTypeInternal _KeyAndClientIP_default_instance_;
PROTOBUF_CONSTEXPR RepIfGetSucess::RepIfGetSucess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ifgetsucess_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RepIfGetSucessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RepIfGetSucessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RepIfGetSucessDefaultTypeInternal() {}
  union {
    RepIfGetSucess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RepIfGetSucessDefaultTypeInternal _RepIfGetSucess_default_instance_;
}  // namespace coordinator_proto
static ::_pb::Metadata file_level_metadata_coordinator_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_coordinator_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_coordinator_2eproto = nullptr;

const uint32_t TableStruct_coordinator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::RequestToCoordinator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::RequestToCoordinator, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::ReplyFromCoordinator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::ReplyFromCoordinator, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::RequestProxyIPPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::RequestProxyIPPort, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::RequestProxyIPPort, _impl_.valuesizebytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::ReplyProxyIPPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::ReplyProxyIPPort, _impl_.proxyip_),
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::ReplyProxyIPPort, _impl_.proxyport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::CommitAbortKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::CommitAbortKey, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::CommitAbortKey, _impl_.ifcommitmetadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::AskIfSetSucess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::AskIfSetSucess, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::RepIfSetSucess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::RepIfSetSucess, _impl_.ifcommit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::KeyAndClientIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::KeyAndClientIP, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::KeyAndClientIP, _impl_.clientip_),
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::KeyAndClientIP, _impl_.clientport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::RepIfGetSucess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::coordinator_proto::RepIfGetSucess, _impl_.ifgetsucess_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::coordinator_proto::RequestToCoordinator)},
  { 7, -1, -1, sizeof(::coordinator_proto::ReplyFromCoordinator)},
  { 14, -1, -1, sizeof(::coordinator_proto::RequestProxyIPPort)},
  { 22, -1, -1, sizeof(::coordinator_proto::ReplyProxyIPPort)},
  { 30, -1, -1, sizeof(::coordinator_proto::CommitAbortKey)},
  { 38, -1, -1, sizeof(::coordinator_proto::AskIfSetSucess)},
  { 45, -1, -1, sizeof(::coordinator_proto::RepIfSetSucess)},
  { 52, -1, -1, sizeof(::coordinator_proto::KeyAndClientIP)},
  { 61, -1, -1, sizeof(::coordinator_proto::RepIfGetSucess)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::coordinator_proto::_RequestToCoordinator_default_instance_._instance,
  &::coordinator_proto::_ReplyFromCoordinator_default_instance_._instance,
  &::coordinator_proto::_RequestProxyIPPort_default_instance_._instance,
  &::coordinator_proto::_ReplyProxyIPPort_default_instance_._instance,
  &::coordinator_proto::_CommitAbortKey_default_instance_._instance,
  &::coordinator_proto::_AskIfSetSucess_default_instance_._instance,
  &::coordinator_proto::_RepIfSetSucess_default_instance_._instance,
  &::coordinator_proto::_KeyAndClientIP_default_instance_._instance,
  &::coordinator_proto::_RepIfGetSucess_default_instance_._instance,
};

const char descriptor_table_protodef_coordinator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021coordinator.proto\022\021coordinator_proto\"$"
  "\n\024RequestToCoordinator\022\014\n\004name\030\001 \001(\t\"\'\n\024"
  "ReplyFromCoordinator\022\017\n\007message\030\001 \001(\t\"9\n"
  "\022RequestProxyIPPort\022\013\n\003key\030\001 \001(\t\022\026\n\016valu"
  "esizebytes\030\002 \001(\005\"6\n\020ReplyProxyIPPort\022\017\n\007"
  "proxyIP\030\001 \001(\t\022\021\n\tproxyPort\030\002 \001(\005\"7\n\016Comm"
  "itAbortKey\022\013\n\003key\030\001 \001(\t\022\030\n\020ifcommitMetaD"
  "ata\030\002 \001(\010\"\035\n\016AskIfSetSucess\022\013\n\003key\030\001 \001(\t"
  "\"\"\n\016RepIfSetSucess\022\020\n\010ifcommit\030\001 \001(\010\"C\n\016"
  "KeyAndClientIP\022\013\n\003key\030\001 \001(\t\022\020\n\010clientip\030"
  "\002 \001(\t\022\022\n\nclientport\030\003 \001(\005\"%\n\016RepIfGetSuc"
  "ess\022\023\n\013ifgetsucess\030\001 \001(\0102\334\004\n\022Coordinator"
  "Service\022k\n\025sayHelloToCoordinator\022\'.coord"
  "inator_proto.RequestToCoordinator\032\'.coor"
  "dinator_proto.ReplyFromCoordinator\"\000\022d\n\024"
  "uploadOriginKeyValue\022%.coordinator_proto"
  ".RequestProxyIPPort\032#.coordinator_proto."
  "ReplyProxyIPPort\"\000\022`\n\ncheckalive\022\'.coord"
  "inator_proto.RequestToCoordinator\032\'.coor"
  "dinator_proto.ReplyFromCoordinator\"\000\022a\n\021"
  "reportCommitAbort\022!.coordinator_proto.Co"
  "mmitAbortKey\032\'.coordinator_proto.ReplyFr"
  "omCoordinator\"\000\022Z\n\020checkCommitAbort\022!.co"
  "ordinator_proto.AskIfSetSucess\032!.coordin"
  "ator_proto.RepIfSetSucess\"\000\022R\n\010getValue\022"
  "!.coordinator_proto.KeyAndClientIP\032!.coo"
  "rdinator_proto.RepIfGetSucess\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_coordinator_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_coordinator_2eproto = {
    false, false, 1079, descriptor_table_protodef_coordinator_2eproto,
    "coordinator.proto",
    &descriptor_table_coordinator_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_coordinator_2eproto::offsets,
    file_level_metadata_coordinator_2eproto, file_level_enum_descriptors_coordinator_2eproto,
    file_level_service_descriptors_coordinator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_coordinator_2eproto_getter() {
  return &descriptor_table_coordinator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_coordinator_2eproto(&descriptor_table_coordinator_2eproto);
namespace coordinator_proto {

// ===================================================================

class RequestToCoordinator::_Internal {
 public:
};

RequestToCoordinator::RequestToCoordinator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:coordinator_proto.RequestToCoordinator)
}
RequestToCoordinator::RequestToCoordinator(const RequestToCoordinator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestToCoordinator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:coordinator_proto.RequestToCoordinator)
}

inline void RequestToCoordinator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestToCoordinator::~RequestToCoordinator() {
  // @@protoc_insertion_point(destructor:coordinator_proto.RequestToCoordinator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestToCoordinator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void RequestToCoordinator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestToCoordinator::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator_proto.RequestToCoordinator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestToCoordinator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "coordinator_proto.RequestToCoordinator.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestToCoordinator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator_proto.RequestToCoordinator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator_proto.RequestToCoordinator.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator_proto.RequestToCoordinator)
  return target;
}

size_t RequestToCoordinator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator_proto.RequestToCoordinator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestToCoordinator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestToCoordinator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestToCoordinator::GetClassData() const { return &_class_data_; }


void RequestToCoordinator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestToCoordinator*>(&to_msg);
  auto& from = static_cast<const RequestToCoordinator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:coordinator_proto.RequestToCoordinator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestToCoordinator::CopyFrom(const RequestToCoordinator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator_proto.RequestToCoordinator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestToCoordinator::IsInitialized() const {
  return true;
}

void RequestToCoordinator::InternalSwap(RequestToCoordinator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestToCoordinator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[0]);
}

// ===================================================================

class ReplyFromCoordinator::_Internal {
 public:
};

ReplyFromCoordinator::ReplyFromCoordinator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:coordinator_proto.ReplyFromCoordinator)
}
ReplyFromCoordinator::ReplyFromCoordinator(const ReplyFromCoordinator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplyFromCoordinator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:coordinator_proto.ReplyFromCoordinator)
}

inline void ReplyFromCoordinator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReplyFromCoordinator::~ReplyFromCoordinator() {
  // @@protoc_insertion_point(destructor:coordinator_proto.ReplyFromCoordinator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplyFromCoordinator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ReplyFromCoordinator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplyFromCoordinator::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator_proto.ReplyFromCoordinator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplyFromCoordinator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "coordinator_proto.ReplyFromCoordinator.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplyFromCoordinator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator_proto.ReplyFromCoordinator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator_proto.ReplyFromCoordinator.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator_proto.ReplyFromCoordinator)
  return target;
}

size_t ReplyFromCoordinator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator_proto.ReplyFromCoordinator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplyFromCoordinator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplyFromCoordinator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplyFromCoordinator::GetClassData() const { return &_class_data_; }


void ReplyFromCoordinator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplyFromCoordinator*>(&to_msg);
  auto& from = static_cast<const ReplyFromCoordinator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:coordinator_proto.ReplyFromCoordinator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplyFromCoordinator::CopyFrom(const ReplyFromCoordinator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator_proto.ReplyFromCoordinator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyFromCoordinator::IsInitialized() const {
  return true;
}

void ReplyFromCoordinator::InternalSwap(ReplyFromCoordinator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyFromCoordinator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[1]);
}

// ===================================================================

class RequestProxyIPPort::_Internal {
 public:
};

RequestProxyIPPort::RequestProxyIPPort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:coordinator_proto.RequestProxyIPPort)
}
RequestProxyIPPort::RequestProxyIPPort(const RequestProxyIPPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestProxyIPPort* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.valuesizebytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.valuesizebytes_ = from._impl_.valuesizebytes_;
  // @@protoc_insertion_point(copy_constructor:coordinator_proto.RequestProxyIPPort)
}

inline void RequestProxyIPPort::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.valuesizebytes_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestProxyIPPort::~RequestProxyIPPort() {
  // @@protoc_insertion_point(destructor:coordinator_proto.RequestProxyIPPort)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestProxyIPPort::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void RequestProxyIPPort::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestProxyIPPort::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator_proto.RequestProxyIPPort)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.valuesizebytes_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestProxyIPPort::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "coordinator_proto.RequestProxyIPPort.key"));
        } else
          goto handle_unusual;
        continue;
      // int32 valuesizebytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.valuesizebytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestProxyIPPort::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator_proto.RequestProxyIPPort)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator_proto.RequestProxyIPPort.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 valuesizebytes = 2;
  if (this->_internal_valuesizebytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_valuesizebytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator_proto.RequestProxyIPPort)
  return target;
}

size_t RequestProxyIPPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator_proto.RequestProxyIPPort)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 valuesizebytes = 2;
  if (this->_internal_valuesizebytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_valuesizebytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestProxyIPPort::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestProxyIPPort::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestProxyIPPort::GetClassData() const { return &_class_data_; }


void RequestProxyIPPort::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestProxyIPPort*>(&to_msg);
  auto& from = static_cast<const RequestProxyIPPort&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:coordinator_proto.RequestProxyIPPort)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_valuesizebytes() != 0) {
    _this->_internal_set_valuesizebytes(from._internal_valuesizebytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestProxyIPPort::CopyFrom(const RequestProxyIPPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator_proto.RequestProxyIPPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestProxyIPPort::IsInitialized() const {
  return true;
}

void RequestProxyIPPort::InternalSwap(RequestProxyIPPort* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.valuesizebytes_, other->_impl_.valuesizebytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestProxyIPPort::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[2]);
}

// ===================================================================

class ReplyProxyIPPort::_Internal {
 public:
};

ReplyProxyIPPort::ReplyProxyIPPort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:coordinator_proto.ReplyProxyIPPort)
}
ReplyProxyIPPort::ReplyProxyIPPort(const ReplyProxyIPPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplyProxyIPPort* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proxyip_){}
    , decltype(_impl_.proxyport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proxyip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proxyip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proxyip().empty()) {
    _this->_impl_.proxyip_.Set(from._internal_proxyip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.proxyport_ = from._impl_.proxyport_;
  // @@protoc_insertion_point(copy_constructor:coordinator_proto.ReplyProxyIPPort)
}

inline void ReplyProxyIPPort::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.proxyip_){}
    , decltype(_impl_.proxyport_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.proxyip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proxyip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReplyProxyIPPort::~ReplyProxyIPPort() {
  // @@protoc_insertion_point(destructor:coordinator_proto.ReplyProxyIPPort)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplyProxyIPPort::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proxyip_.Destroy();
}

void ReplyProxyIPPort::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplyProxyIPPort::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator_proto.ReplyProxyIPPort)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proxyip_.ClearToEmpty();
  _impl_.proxyport_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplyProxyIPPort::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string proxyIP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_proxyip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "coordinator_proto.ReplyProxyIPPort.proxyIP"));
        } else
          goto handle_unusual;
        continue;
      // int32 proxyPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.proxyport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplyProxyIPPort::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator_proto.ReplyProxyIPPort)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string proxyIP = 1;
  if (!this->_internal_proxyip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxyip().data(), static_cast<int>(this->_internal_proxyip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator_proto.ReplyProxyIPPort.proxyIP");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proxyip(), target);
  }

  // int32 proxyPort = 2;
  if (this->_internal_proxyport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_proxyport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator_proto.ReplyProxyIPPort)
  return target;
}

size_t ReplyProxyIPPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator_proto.ReplyProxyIPPort)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proxyIP = 1;
  if (!this->_internal_proxyip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxyip());
  }

  // int32 proxyPort = 2;
  if (this->_internal_proxyport() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_proxyport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplyProxyIPPort::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplyProxyIPPort::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplyProxyIPPort::GetClassData() const { return &_class_data_; }


void ReplyProxyIPPort::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplyProxyIPPort*>(&to_msg);
  auto& from = static_cast<const ReplyProxyIPPort&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:coordinator_proto.ReplyProxyIPPort)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proxyip().empty()) {
    _this->_internal_set_proxyip(from._internal_proxyip());
  }
  if (from._internal_proxyport() != 0) {
    _this->_internal_set_proxyport(from._internal_proxyport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplyProxyIPPort::CopyFrom(const ReplyProxyIPPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator_proto.ReplyProxyIPPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyProxyIPPort::IsInitialized() const {
  return true;
}

void ReplyProxyIPPort::InternalSwap(ReplyProxyIPPort* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proxyip_, lhs_arena,
      &other->_impl_.proxyip_, rhs_arena
  );
  swap(_impl_.proxyport_, other->_impl_.proxyport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyProxyIPPort::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[3]);
}

// ===================================================================

class CommitAbortKey::_Internal {
 public:
};

CommitAbortKey::CommitAbortKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:coordinator_proto.CommitAbortKey)
}
CommitAbortKey::CommitAbortKey(const CommitAbortKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommitAbortKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.ifcommitmetadata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ifcommitmetadata_ = from._impl_.ifcommitmetadata_;
  // @@protoc_insertion_point(copy_constructor:coordinator_proto.CommitAbortKey)
}

inline void CommitAbortKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.ifcommitmetadata_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommitAbortKey::~CommitAbortKey() {
  // @@protoc_insertion_point(destructor:coordinator_proto.CommitAbortKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommitAbortKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void CommitAbortKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommitAbortKey::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator_proto.CommitAbortKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.ifcommitmetadata_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitAbortKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "coordinator_proto.CommitAbortKey.key"));
        } else
          goto handle_unusual;
        continue;
      // bool ifcommitMetaData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ifcommitmetadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitAbortKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator_proto.CommitAbortKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator_proto.CommitAbortKey.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bool ifcommitMetaData = 2;
  if (this->_internal_ifcommitmetadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ifcommitmetadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator_proto.CommitAbortKey)
  return target;
}

size_t CommitAbortKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator_proto.CommitAbortKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bool ifcommitMetaData = 2;
  if (this->_internal_ifcommitmetadata() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitAbortKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommitAbortKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitAbortKey::GetClassData() const { return &_class_data_; }


void CommitAbortKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommitAbortKey*>(&to_msg);
  auto& from = static_cast<const CommitAbortKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:coordinator_proto.CommitAbortKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_ifcommitmetadata() != 0) {
    _this->_internal_set_ifcommitmetadata(from._internal_ifcommitmetadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitAbortKey::CopyFrom(const CommitAbortKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator_proto.CommitAbortKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitAbortKey::IsInitialized() const {
  return true;
}

void CommitAbortKey::InternalSwap(CommitAbortKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.ifcommitmetadata_, other->_impl_.ifcommitmetadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitAbortKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[4]);
}

// ===================================================================

class AskIfSetSucess::_Internal {
 public:
};

AskIfSetSucess::AskIfSetSucess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:coordinator_proto.AskIfSetSucess)
}
AskIfSetSucess::AskIfSetSucess(const AskIfSetSucess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AskIfSetSucess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:coordinator_proto.AskIfSetSucess)
}

inline void AskIfSetSucess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AskIfSetSucess::~AskIfSetSucess() {
  // @@protoc_insertion_point(destructor:coordinator_proto.AskIfSetSucess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AskIfSetSucess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void AskIfSetSucess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AskIfSetSucess::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator_proto.AskIfSetSucess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AskIfSetSucess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "coordinator_proto.AskIfSetSucess.key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AskIfSetSucess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator_proto.AskIfSetSucess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator_proto.AskIfSetSucess.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator_proto.AskIfSetSucess)
  return target;
}

size_t AskIfSetSucess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator_proto.AskIfSetSucess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AskIfSetSucess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AskIfSetSucess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AskIfSetSucess::GetClassData() const { return &_class_data_; }


void AskIfSetSucess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AskIfSetSucess*>(&to_msg);
  auto& from = static_cast<const AskIfSetSucess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:coordinator_proto.AskIfSetSucess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AskIfSetSucess::CopyFrom(const AskIfSetSucess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator_proto.AskIfSetSucess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskIfSetSucess::IsInitialized() const {
  return true;
}

void AskIfSetSucess::InternalSwap(AskIfSetSucess* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AskIfSetSucess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[5]);
}

// ===================================================================

class RepIfSetSucess::_Internal {
 public:
};

RepIfSetSucess::RepIfSetSucess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:coordinator_proto.RepIfSetSucess)
}
RepIfSetSucess::RepIfSetSucess(const RepIfSetSucess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RepIfSetSucess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ifcommit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ifcommit_ = from._impl_.ifcommit_;
  // @@protoc_insertion_point(copy_constructor:coordinator_proto.RepIfSetSucess)
}

inline void RepIfSetSucess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ifcommit_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RepIfSetSucess::~RepIfSetSucess() {
  // @@protoc_insertion_point(destructor:coordinator_proto.RepIfSetSucess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RepIfSetSucess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RepIfSetSucess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RepIfSetSucess::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator_proto.RepIfSetSucess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ifcommit_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepIfSetSucess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ifcommit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ifcommit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RepIfSetSucess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator_proto.RepIfSetSucess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ifcommit = 1;
  if (this->_internal_ifcommit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ifcommit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator_proto.RepIfSetSucess)
  return target;
}

size_t RepIfSetSucess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator_proto.RepIfSetSucess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ifcommit = 1;
  if (this->_internal_ifcommit() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RepIfSetSucess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RepIfSetSucess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RepIfSetSucess::GetClassData() const { return &_class_data_; }


void RepIfSetSucess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RepIfSetSucess*>(&to_msg);
  auto& from = static_cast<const RepIfSetSucess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:coordinator_proto.RepIfSetSucess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ifcommit() != 0) {
    _this->_internal_set_ifcommit(from._internal_ifcommit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RepIfSetSucess::CopyFrom(const RepIfSetSucess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator_proto.RepIfSetSucess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepIfSetSucess::IsInitialized() const {
  return true;
}

void RepIfSetSucess::InternalSwap(RepIfSetSucess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ifcommit_, other->_impl_.ifcommit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RepIfSetSucess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[6]);
}

// ===================================================================

class KeyAndClientIP::_Internal {
 public:
};

KeyAndClientIP::KeyAndClientIP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:coordinator_proto.KeyAndClientIP)
}
KeyAndClientIP::KeyAndClientIP(const KeyAndClientIP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyAndClientIP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.clientip_){}
    , decltype(_impl_.clientport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientip().empty()) {
    _this->_impl_.clientip_.Set(from._internal_clientip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.clientport_ = from._impl_.clientport_;
  // @@protoc_insertion_point(copy_constructor:coordinator_proto.KeyAndClientIP)
}

inline void KeyAndClientIP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.clientip_){}
    , decltype(_impl_.clientport_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyAndClientIP::~KeyAndClientIP() {
  // @@protoc_insertion_point(destructor:coordinator_proto.KeyAndClientIP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyAndClientIP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.clientip_.Destroy();
}

void KeyAndClientIP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyAndClientIP::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator_proto.KeyAndClientIP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.clientip_.ClearToEmpty();
  _impl_.clientport_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyAndClientIP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "coordinator_proto.KeyAndClientIP.key"));
        } else
          goto handle_unusual;
        continue;
      // string clientip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "coordinator_proto.KeyAndClientIP.clientip"));
        } else
          goto handle_unusual;
        continue;
      // int32 clientport = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.clientport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyAndClientIP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator_proto.KeyAndClientIP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator_proto.KeyAndClientIP.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string clientip = 2;
  if (!this->_internal_clientip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientip().data(), static_cast<int>(this->_internal_clientip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator_proto.KeyAndClientIP.clientip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientip(), target);
  }

  // int32 clientport = 3;
  if (this->_internal_clientport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_clientport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator_proto.KeyAndClientIP)
  return target;
}

size_t KeyAndClientIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator_proto.KeyAndClientIP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string clientip = 2;
  if (!this->_internal_clientip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientip());
  }

  // int32 clientport = 3;
  if (this->_internal_clientport() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyAndClientIP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyAndClientIP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyAndClientIP::GetClassData() const { return &_class_data_; }


void KeyAndClientIP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyAndClientIP*>(&to_msg);
  auto& from = static_cast<const KeyAndClientIP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:coordinator_proto.KeyAndClientIP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_clientip().empty()) {
    _this->_internal_set_clientip(from._internal_clientip());
  }
  if (from._internal_clientport() != 0) {
    _this->_internal_set_clientport(from._internal_clientport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyAndClientIP::CopyFrom(const KeyAndClientIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator_proto.KeyAndClientIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyAndClientIP::IsInitialized() const {
  return true;
}

void KeyAndClientIP::InternalSwap(KeyAndClientIP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientip_, lhs_arena,
      &other->_impl_.clientip_, rhs_arena
  );
  swap(_impl_.clientport_, other->_impl_.clientport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyAndClientIP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[7]);
}

// ===================================================================

class RepIfGetSucess::_Internal {
 public:
};

RepIfGetSucess::RepIfGetSucess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:coordinator_proto.RepIfGetSucess)
}
RepIfGetSucess::RepIfGetSucess(const RepIfGetSucess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RepIfGetSucess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ifgetsucess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ifgetsucess_ = from._impl_.ifgetsucess_;
  // @@protoc_insertion_point(copy_constructor:coordinator_proto.RepIfGetSucess)
}

inline void RepIfGetSucess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ifgetsucess_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RepIfGetSucess::~RepIfGetSucess() {
  // @@protoc_insertion_point(destructor:coordinator_proto.RepIfGetSucess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RepIfGetSucess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RepIfGetSucess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RepIfGetSucess::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator_proto.RepIfGetSucess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ifgetsucess_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepIfGetSucess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ifgetsucess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ifgetsucess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RepIfGetSucess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator_proto.RepIfGetSucess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ifgetsucess = 1;
  if (this->_internal_ifgetsucess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ifgetsucess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator_proto.RepIfGetSucess)
  return target;
}

size_t RepIfGetSucess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator_proto.RepIfGetSucess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ifgetsucess = 1;
  if (this->_internal_ifgetsucess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RepIfGetSucess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RepIfGetSucess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RepIfGetSucess::GetClassData() const { return &_class_data_; }


void RepIfGetSucess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RepIfGetSucess*>(&to_msg);
  auto& from = static_cast<const RepIfGetSucess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:coordinator_proto.RepIfGetSucess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ifgetsucess() != 0) {
    _this->_internal_set_ifgetsucess(from._internal_ifgetsucess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RepIfGetSucess::CopyFrom(const RepIfGetSucess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator_proto.RepIfGetSucess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepIfGetSucess::IsInitialized() const {
  return true;
}

void RepIfGetSucess::InternalSwap(RepIfGetSucess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ifgetsucess_, other->_impl_.ifgetsucess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RepIfGetSucess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace coordinator_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::coordinator_proto::RequestToCoordinator*
Arena::CreateMaybeMessage< ::coordinator_proto::RequestToCoordinator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coordinator_proto::RequestToCoordinator >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator_proto::ReplyFromCoordinator*
Arena::CreateMaybeMessage< ::coordinator_proto::ReplyFromCoordinator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coordinator_proto::ReplyFromCoordinator >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator_proto::RequestProxyIPPort*
Arena::CreateMaybeMessage< ::coordinator_proto::RequestProxyIPPort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coordinator_proto::RequestProxyIPPort >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator_proto::ReplyProxyIPPort*
Arena::CreateMaybeMessage< ::coordinator_proto::ReplyProxyIPPort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coordinator_proto::ReplyProxyIPPort >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator_proto::CommitAbortKey*
Arena::CreateMaybeMessage< ::coordinator_proto::CommitAbortKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coordinator_proto::CommitAbortKey >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator_proto::AskIfSetSucess*
Arena::CreateMaybeMessage< ::coordinator_proto::AskIfSetSucess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coordinator_proto::AskIfSetSucess >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator_proto::RepIfSetSucess*
Arena::CreateMaybeMessage< ::coordinator_proto::RepIfSetSucess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coordinator_proto::RepIfSetSucess >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator_proto::KeyAndClientIP*
Arena::CreateMaybeMessage< ::coordinator_proto::KeyAndClientIP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coordinator_proto::KeyAndClientIP >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator_proto::RepIfGetSucess*
Arena::CreateMaybeMessage< ::coordinator_proto::RepIfGetSucess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coordinator_proto::RepIfGetSucess >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
